------------------------------ Structured parsed result ------------------------------
Keys: ['auto_keffs', 'batch_data', 'list_responses']
auto_keffs     list of 4 elements -> 
    elt 0:       Dict with keys = ['keff_estimator', 'response_type', 'results']
        keff_estimator KSTEP
        response_type auto_keff
        results         Dict with keys = ['auto_keff', 'discarded_batches', 'used_batches']
          auto_keff           Dict with keys = ['keff', 'sigma', 'sigma%']
            keff 9.122718e-01, dtype: float64
            sigma 6.131945e-03, dtype: float64
            sigma% 6.721621e-01, dtype: float64
          discarded_batches 2, dtype: int64
          used_batches 8, dtype: int64
    elt 1:       Dict with keys = ['keff_estimator', 'response_type', 'results']
        keff_estimator KCOLL
        response_type auto_keff
        results         Dict with keys = ['auto_keff', 'discarded_batches', 'used_batches']
          auto_keff           Dict with keys = ['keff', 'sigma', 'sigma%']
            keff 9.121435e-01, dtype: float64
            sigma 6.034187e-03, dtype: float64
            sigma% 6.615392e-01, dtype: float64
          discarded_batches 2, dtype: int64
          used_batches 8, dtype: int64
    elt 2:       Dict with keys = ['keff_estimator', 'response_type', 'results']
        keff_estimator KTRACK
        response_type auto_keff
        results         Dict with keys = ['auto_keff', 'discarded_batches', 'used_batches']
          auto_keff           Dict with keys = ['keff', 'sigma', 'sigma%']
            keff 9.082232e-01, dtype: float64
            sigma 7.976384e-03, dtype: float64
            sigma% 8.782405e-01, dtype: float64
          discarded_batches 2, dtype: int64
          used_batches 8, dtype: int64
    elt 3:       Dict with keys = ['keff_estimator', 'response_type', 'results']
        keff_estimator MACRO KCOLL
        response_type auto_keff
        results         Dict with keys = ['auto_keff', 'discarded_batches', 'used_batches']
          auto_keff           Dict with keys = ['keff', 'sigma', 'sigma%']
            keff 9.130250e-01, dtype: float64
            sigma 5.407199e-03, dtype: float64
            sigma% 5.922290e-01, dtype: float64
          discarded_batches 2, dtype: int64
          used_batches 8, dtype: int64

batch_data     Dict with keys = ['edition_batch_number', 'mean_weight_leak', 'simulation_time', 'source_intensity']
      edition_batch_number 10, dtype: int64
      mean_weight_leak       Dict with keys = ['score', 'sigma', 'sigma%']
        score 1.990297e+00, dtype: float64
        sigma 4.771245e-01, dtype: float64
        sigma% 2.397252e+01, dtype: float64
      simulation_time 24, dtype: int64
      source_intensity 1.000000e+00, dtype: float64

list_responses 
Number of responses: 2

      RESPONSE 0      'response metadata'
      Dict with keys = ['composition', 'concentration', 'energy_split_name', 'particle', 'reaction', 'reaction_on_nucleus', 'response_function', 'response_index', 'response_type', 'score_index', 'scoring_mode', 'scoring_zone_type', 'temperature']
        composition ('FUEL',)
        concentration (0.00082213,)
        energy_split_name DEC_INTEG4
        particle NEUTRON
        reaction ('codes_:_33',)
        reaction_on_nucleus ('U235',)
        response_function REACTION
        response_index 0
        response_type score
        score_index 0
        scoring_mode SCORE_COLL
        scoring_zone_type Mesh
        temperature (300.0,)
      results (<class 'dict'>) -> score
        Dict with keys = ['boltzmann_entropy', 'discarded_batches', 'integrated', 'mesh', 'shannon_entropy', 'spectrum', 'used_batches']
          boltzmann_entropy 8.342621e-01, dtype: float64
          discarded_batches 1, dtype: int64
          integrated           Dict with keys = ['score', 'sigma']
            score 3.536549e-01, dtype: float64
            sigma 7.371170e-01, dtype: float64
          mesh           Dict with keys = ['array', 'bins', 'units']
            array <class 'numpy.ndarray'>, shape: (4, 3, 1, 1, 1, 1, 1), dtype: [('score', '<f8'), ('sigma', '<f8')], squeezed:
[[(0.000000e+00, 0.000000e+00) (0.000000e+00, 0.000000e+00)
  (0.000000e+00, 0.000000e+00)]
 [(0.000000e+00, 0.000000e+00) (0.000000e+00, 0.000000e+00)
  (0.000000e+00, 0.000000e+00)]
 [(0.000000e+00, 0.000000e+00) (0.000000e+00, 0.000000e+00)
  (0.000000e+00, 0.000000e+00)]
 [(0.000000e+00, 0.000000e+00) (nan, nan) (nan, nan)]]
            bins             Dict with keys = ['s0', 's1', 's2', 'e', 't', 'mu', 'phi']
              s0 <class 'numpy.ndarray'>, shape: (4,), dtype: int64, squeezed:
[0 1 2 3]
              s1 <class 'numpy.ndarray'>, shape: (3,), dtype: int64, squeezed:
[0 1 2]
              s2 <class 'numpy.ndarray'>, shape: (1,), dtype: int64, squeezed:
0
              e <class 'numpy.ndarray'>, shape: (2,), dtype: float64, squeezed:
[1.000000e-11 2.000000e+01]
              t <class 'numpy.ndarray'>, shape: (0,), dtype: float64, squeezed:
[]
              mu <class 'numpy.ndarray'>, shape: (0,), dtype: float64, squeezed:
[]
              phi <class 'numpy.ndarray'>, shape: (0,), dtype: float64, squeezed:
[]
            units             Dict with keys = ['e', 'mu', 'phi', 's0', 's1', 's2', 'score', 'sigma', 't']
              e MeV
              mu 
              phi rad
              s0 cm
              s1 unknown
              s2 unknown
              score unknown
              sigma %
              t s
          shannon_entropy 9.047529e-01, dtype: float64
          spectrum           Dict with keys = ['array', 'bins', 'units']
            array <class 'numpy.ndarray'>, shape: (1, 1, 1, 1, 1, 1, 1), dtype: [('score', '<f8'), ('sigma', '<f8'), ('score/lethargy', '<f8')], squeezed:
(0.000000e+00, 0.000000e+00, 0.000000e+00)
            bins             Dict with keys = ['s0', 's1', 's2', 'e', 't', 'mu', 'phi']
              s0 <class 'numpy.ndarray'>, shape: (0,), dtype: float64, squeezed:
[]
              s1 <class 'numpy.ndarray'>, shape: (0,), dtype: float64, squeezed:
[]
              s2 <class 'numpy.ndarray'>, shape: (0,), dtype: float64, squeezed:
[]
              e <class 'numpy.ndarray'>, shape: (2,), dtype: float64, squeezed:
[1.000000e-11 2.000000e+01]
              t <class 'numpy.ndarray'>, shape: (0,), dtype: float64, squeezed:
[]
              mu <class 'numpy.ndarray'>, shape: (0,), dtype: float64, squeezed:
[]
              phi <class 'numpy.ndarray'>, shape: (0,), dtype: float64, squeezed:
[]
            units             Dict with keys = ['e', 'mu', 'phi', 's0', 's1', 's2', 'score', 'sigma', 't']
              e MeV
              mu 
              phi rad
              s0 cm
              s1 unknown
              s2 unknown
              score unknown
              sigma %
              t s
          used_batches 9, dtype: int64

      RESPONSE 1      'response metadata'
      Dict with keys = ['response_function', 'response_index', 'response_type']
        response_function KEFFS
        response_index 1
        response_type keff
      results (<class 'dict'>) -> keff
        Dict with keys = ['keff_combination', 'keff_per_estimator', 'used_batches']
          keff_combination (9.169699e-01, 7.721112e-01), dtype: [('keff', '<f8'), ('sigma', '<f8')]
          keff_per_estimator           Dict with keys = ['correlation_matrix', 'estimators', 'keff_matrix', 'sigma_matrix']
            correlation_matrix <class 'numpy.ndarray'>, shape: (3, 3), dtype: float64, squeezed:
[[1.000000e+00 9.935526e-01 7.818913e-01]
 [9.935526e-01 1.000000e+00 8.287193e-01]
 [7.818913e-01 8.287193e-01 1.000000e+00]]
            estimators ('KSTEP', 'KCOLL', 'KTRACK')
            keff_matrix <class 'numpy.ndarray'>, shape: (3, 3), dtype: float64, squeezed:
[[9.169150e-01 9.168596e-01 9.170936e-01]
 [9.168596e-01 9.170253e-01 9.173621e-01]
 [9.170936e-01 9.173621e-01 9.158044e-01]]
            sigma_matrix <class 'numpy.ndarray'>, shape: (3, 3), dtype: float64, squeezed:
[[7.773594e-01 7.761104e-01 7.687564e-01]
 [7.761104e-01 7.875050e-01 7.666668e-01]
 [7.687564e-01 7.666668e-01 1.129290e+00]]
          used_batches 9, dtype: int64
--------------------------------------------------------------------------------

